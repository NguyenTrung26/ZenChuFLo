import React, { useState, useEffect } from "react";
import {
  View,
  Text,
  StyleSheet,
  Switch,
  TouchableOpacity,
  Platform,
  Alert,
} from "react-native";
import { SafeAreaView } from "react-native-safe-area-context";
import DateTimePicker, {
  DateTimePickerEvent,
} from "@react-native-community/datetimepicker";
import AsyncStorage from "@react-native-async-storage/async-storage";
import * as Haptics from "expo-haptics";
import type { NativeStackScreenProps } from "@react-navigation/native-stack";
import { ProfileStackParamList } from "../../navigation/types";
import { COLORS } from "../../constants/colors";
import { FONT_SIZES, FONT_WEIGHTS } from "../../constants/typography";
import Button from "../../components/common/Button";
import {
  registerForPushNotificationsAsync,
  checkNotificationPermission,
  scheduleDailyNotification,
  cancelAllNotifications,
} from "../../services/notifications";

const REMINDER_KEY = "@YogaApp:reminders";

type Props = NativeStackScreenProps<ProfileStackParamList, "Reminders">;

const RemindersScreen: React.FC<Props> = ({ navigation }) => {
  const [isReminderEnabled, setIsReminderEnabled] = useState(false);
  const [time, setTime] = useState(new Date(new Date().setHours(7, 0, 0)));
  const [showPicker, setShowPicker] = useState(Platform.OS === "ios");

  // Load c√†i ƒë·∫∑t ƒë√£ l∆∞u khi m·ªü m√†n h√¨nh
  useEffect(() => {
    const loadSettings = async () => {
      try {
        const savedSettings = await AsyncStorage.getItem(REMINDER_KEY);
        if (savedSettings) {
          const { enabled, hour, minute } = JSON.parse(savedSettings);
          setIsReminderEnabled(enabled);
          setTime(new Date(new Date().setHours(hour, minute, 0)));
        }
      } catch (err) {
        console.error("Error loading reminder settings:", err);
      }
    };
    loadSettings();

    // ƒêƒÉng k√Ω push notification token ngay khi m·ªü m√†n h√¨nh (background)
    registerForPushNotificationsAsync();
  }, []);

  // X·ª≠ l√Ω khi ng∆∞·ªùi d√πng thay ƒë·ªïi gi·ªù
  const onChangeTime = (event: DateTimePickerEvent, selectedDate?: Date) => {
    if (Platform.OS === "android") {
      setShowPicker(false);
    }
    if (event.type === "set" && selectedDate) {
      setTime(selectedDate);
    }
  };

  // X·ª≠ l√Ω khi b·∫≠t/t·∫Øt c√¥ng t·∫Øc nh·∫Øc nh·ªü
  const handleToggleSwitch = async (value: boolean) => {
    if (value) {
      // Ki·ªÉm tra quy·ªÅn nhanh (kh√¥ng ƒëƒÉng k√Ω l·∫°i)
      const hasPermission = await checkNotificationPermission();
      if (!hasPermission) {
        Alert.alert(
          "Thi·∫øu quy·ªÅn",
          "B·∫°n c·∫ßn c·∫•p quy·ªÅn th√¥ng b√°o trong C√†i ƒë·∫∑t c·ªßa ƒëi·ªán tho·∫°i ƒë·ªÉ s·ª≠ d·ª•ng t√≠nh nƒÉng n√†y."
        );
        return;
      }
    }
    setIsReminderEnabled(value);
    Haptics.selectionAsync();
  };

  // Format th·ªùi gian hi·ªÉn th·ªã (v√≠ d·ª•: 07:05)
  const formatTime = (date: Date) => {
    const hours = date.getHours().toString().padStart(2, "0");
    const minutes = date.getMinutes().toString().padStart(2, "0");
    return `${hours}:${minutes}`;
  };

  // X·ª≠ l√Ω khi nh·∫•n n√∫t L∆∞u C√†i ƒë·∫∑t - T·ªêI ∆ØU T·ªêC ƒê·ªò
  const handleSaveChanges = () => {
    Haptics.impactAsync(Haptics.ImpactFeedbackStyle.Medium);

    const hour = time.getHours();
    const minute = time.getMinutes();

    if (isReminderEnabled) {
      console.log(`üîî ƒêang l∆∞u nh·∫Øc nh·ªü: ${formatTime(time)}`);

      // Hi·ªÉn th·ªã th√¥ng b√°o th√†nh c√¥ng NGAY L·∫¨P T·ª®C
      Alert.alert(
        "‚úÖ ƒê√£ l∆∞u",
        `Nh·∫Øc nh·ªü h√†ng ng√†y c·ªßa b·∫°n ƒë√£ ƒë∆∞·ª£c ƒë·∫∑t v√†o l√∫c ${formatTime(time)}.`,
        [{ text: "OK", onPress: () => navigation.goBack() }]
      );

      // X·ª≠ l√Ω l∆∞u v√† schedule trong background (kh√¥ng ch·ªù)
      (async () => {
        try {
          console.log("üìù B·∫Øt ƒë·∫ßu l∆∞u v√†o AsyncStorage...");
          await AsyncStorage.setItem(
            REMINDER_KEY,
            JSON.stringify({ enabled: true, hour, minute })
          );
          console.log("‚úÖ ƒê√£ l∆∞u v√†o AsyncStorage");

          console.log("‚è∞ B·∫Øt ƒë·∫ßu schedule notification...");
          await scheduleDailyNotification(hour, minute);
          console.log("‚úÖ ƒê√£ schedule notification th√†nh c√¥ng");
        } catch (error) {
          console.error("‚ùå L·ªói khi l∆∞u trong background:", error);
        }
      })();
    } else {
      console.log("üîï ƒêang t·∫Øt nh·∫Øc nh·ªü...");

      // Hi·ªÉn th·ªã th√¥ng b√°o NGAY L·∫¨P T·ª®C
      Alert.alert("üîï ƒê√£ t·∫Øt", "T·∫•t c·∫£ nh·∫Øc nh·ªü ƒë√£ ƒë∆∞·ª£c h·ªßy.", [
        { text: "OK", onPress: () => navigation.goBack() },
      ]);

      // X·ª≠ l√Ω h·ªßy trong background (kh√¥ng ch·ªù)
      (async () => {
        try {
          console.log("üóëÔ∏è ƒêang x√≥a kh·ªèi AsyncStorage...");
          await AsyncStorage.removeItem(REMINDER_KEY);
          console.log("‚úÖ ƒê√£ x√≥a kh·ªèi AsyncStorage");

          console.log("üö´ ƒêang h·ªßy t·∫•t c·∫£ notifications...");
          await cancelAllNotifications();
          console.log("‚úÖ ƒê√£ h·ªßy t·∫•t c·∫£ notifications");
        } catch (error) {
          console.error("‚ùå L·ªói khi h·ªßy trong background:", error);
        }
      })();
    }
  };

  return (
    <SafeAreaView style={styles.container}>
      <Text style={styles.header}>‚è∞ Nh·∫Øc nh·ªü t·∫≠p luy·ªán</Text>
      <Text style={styles.subtitle}>ƒê·∫∑t l·ªãch ƒë·ªÉ kh√¥ng b·ªè l·ª° bu·ªïi t·∫≠p n√†o.</Text>

      <View style={styles.row}>
        <Text style={styles.label}>B·∫≠t nh·∫Øc nh·ªü h√†ng ng√†y</Text>
        <Switch
          trackColor={{ false: "#ccc", true: COLORS.sageGreen }}
          thumbColor={isReminderEnabled ? COLORS.deepPurple : "#f4f3f4"}
          onValueChange={handleToggleSwitch}
          value={isReminderEnabled}
        />
      </View>

      {isReminderEnabled && (
        <View style={styles.timePickerContainer}>
          <Text style={styles.label}>Ch·ªçn th·ªùi gian</Text>

          {Platform.OS === "android" && (
            <TouchableOpacity
              onPress={() => setShowPicker(true)}
              style={styles.timeDisplay}
            >
              <Text style={styles.timeText}>{formatTime(time)}</Text>
            </TouchableOpacity>
          )}

          {(showPicker || Platform.OS === "ios") && (
            <DateTimePicker
              value={time}
              mode="time"
              is24Hour={true}
              display={Platform.OS === "ios" ? "spinner" : "default"}
              onChange={onChangeTime}
            />
          )}
        </View>
      )}

      <View style={styles.buttonContainer}>
        <Button
          title="L∆∞u c√†i ƒë·∫∑t"
          onPress={handleSaveChanges}
          gradient
          haptic="success"
        />
      </View>
    </SafeAreaView>
  );
};

export default RemindersScreen;

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: COLORS.creamWhite,
    padding: 20,
  },
  header: {
    fontSize: FONT_SIZES.h1,
    fontWeight: FONT_WEIGHTS.bold,
    color: COLORS.charcoal,
    marginBottom: 8,
    textAlign: "center",
  },
  subtitle: {
    fontSize: FONT_SIZES.body,
    color: COLORS.lightGray,
    textAlign: "center",
    marginBottom: 40,
  },
  row: {
    flexDirection: "row",
    justifyContent: "space-between",
    alignItems: "center",
    backgroundColor: COLORS.white,
    padding: 20,
    borderRadius: 16,
    marginBottom: 20,
  },
  label: {
    fontSize: FONT_SIZES.body,
    fontWeight: FONT_WEIGHTS.semiBold,
    color: COLORS.charcoal,
  },
  timePickerContainer: {
    backgroundColor: COLORS.white,
    padding: 20,
    borderRadius: 16,
  },
  timeDisplay: {
    marginTop: 15,
    paddingVertical: 12,
    backgroundColor: COLORS.warmGray,
    borderRadius: 10,
    alignItems: "center",
  },
  timeText: {
    fontSize: FONT_SIZES.h2,
    color: COLORS.deepPurple,
    fontWeight: FONT_WEIGHTS.bold,
  },
  buttonContainer: {
    marginTop: "auto",
    paddingBottom: 20,
  },
});
